<% content_for :window_title, "Letter Tracking Map" %>
<div id="map" style="width: 100%; height: <%= @framed ? '100%' : '250px' %>;"></div>
<script src="/map_js/d3.v3.min.js"></script>
<script src="/map_js/topojson.v1.min.js"></script>
<script src="/map_js/datamaps.world.hires.min.js"></script>
<script>
  // Letter data from Rails
  const lettersData = <%= raw @letters_data.to_json %>;

  console.log('Letters data:', lettersData);

  // Initialize the map
  var map = new Datamap({
    element: document.getElementById("map"),
    scope: 'world',
    fills: {
      defaultFill: '#F5F5F5',
      current: '#ff6b6b',
      origin: '#4ecdc4',
      destination: '#45b7d1'
    }
  });

  // Add bubbles for letter locations
  const bubbleData = [];

  lettersData.forEach(letter => {
    // Current location (red dot)
    if (letter.last_location_coords) {
      bubbleData.push({
        name: letter.title,
        latitude: letter.last_location_coords.latitude,
        longitude: letter.last_location_coords.longitude,
        radius: 8,
        fillKey: 'current',
        letter_id: letter.id,
        status: letter.status,
        location: letter.last_location
      });
    }

    // Origin (teal dot)
    if (letter.origin_coords) {
      bubbleData.push({
        name: `${letter.title} - Origin`,
        latitude: letter.origin_coords.latitude,
        longitude: letter.origin_coords.longitude,
        radius: 4,
        fillKey: 'origin'
      });
    }

    // Destination (blue dot)
    if (letter.destination_coords) {
      bubbleData.push({
        name: `${letter.title} - Destination`,
        latitude: letter.destination_coords.latitude,
        longitude: letter.destination_coords.longitude,
        radius: 4,
        fillKey: 'destination'
      });
    }
  });

  map.bubbles(bubbleData, {
    popupTemplate: function(geo, data) {
      return [
        '<div class="hoverinfo">',
        '<strong>' + data.name + '</strong><br/>',
        data.status ? 'Status: ' + data.status + '<br/>' : '',
        data.location ? 'Location: ' + data.location : '',
        '</div>'
      ].join('');
    },
    borderWidth: 1,
    borderColor: '#FFFFFF',
    fillOpacity: 0.8
  });

  // Add arcs for letter paths
  const arcs = [];

  lettersData.forEach(letter => {
    const validEvents = letter.events.filter(event =>
      event.coordinates &&
      event.coordinates.latitude &&
      event.coordinates.longitude
    );

    // Solid arcs between consecutive events (traveled path)
    for (let i = 0; i < validEvents.length - 1; i++) {
      const current = validEvents[i];
      const next = validEvents[i + 1];

      arcs.push({
        origin: {
          latitude: current.coordinates.latitude,
          longitude: current.coordinates.longitude
        },
        destination: {
          latitude: next.coordinates.latitude,
          longitude: next.coordinates.longitude
        },
        options: {
          strokeWidth: 2,
          strokeColor: '#feca57',
          greatArc: true
        }
      });
    }

    // Dotted arc from current location to destination
    const lastEvent = validEvents[validEvents.length - 1];
    if (lastEvent && letter.destination_coords && letter.status !== 'received') {
      arcs.push({
        origin: {
          latitude: lastEvent.coordinates.latitude,
          longitude: lastEvent.coordinates.longitude
        },
        destination: {
          latitude: letter.destination_coords.latitude,
          longitude: letter.destination_coords.longitude
        },
        options: {
          strokeWidth: 2,
          strokeColor: '#a55eea',
          strokeDasharray: '5,5',
          greatArc: true
        }
      });
    }
  });

  if (arcs.length > 0) {
    map.arc(arcs);
  }

  // Click handler for bubbles
  d3.selectAll('.datamaps-bubble').on('click', function(bubble) {
    if (bubble.letter_id) {
      window.open(`/letters/${bubble.letter_id}`, '_blank');
    }
  });
</script>